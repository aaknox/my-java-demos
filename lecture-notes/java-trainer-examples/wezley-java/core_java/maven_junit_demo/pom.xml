<!-- 
	Mavenâ€™s primary goal is to allow a developer to comprehend the complete state of a development effort in the 
	shortest period of time. In order to attain this goal there are several areas of concern that Maven attempts 
	to deal with:
	
		+ Making the build process easy
		+ Providing a uniform build system
		+ Providing quality project information
		+ Providing guidelines for best practices development
		+ Allowing transparent migration to new features
		
	This document that we are in currently is known as the pom.xml, POM is an abbreviation for Project Object
	Model. This XML document represents the information needed to build this application into a JAR file (Java 
	ARchive file).
	Maven is based around the central concept of a build lifecycle. What this means is that the process for building 
	and distributing a particular artifact (project) is clearly defined.
	For the person building a project, this means that it is only necessary to learn a small set of commands to build 
	any Maven project, and the POM will ensure they get the results they desired.
	
	There are three built-in build lifecycles: default, clean and site. The default lifecycle handles your project 
	deployment, the clean lifecycle handles project cleaning, while the site lifecycle handles the creation of your 
	project's site documentation.	
	
	Each of these build lifecycles is defined by a different list of build phases, wherein a build phase represents a 
	stage in the lifecycle. For example, the default lifecycle comprises of the following phases:
	
		+ validate - validate the project is correct and all necessary information is available
		+ compile - compile the source code of the project
		+ test - test the compiled source code using a suitable unit testing framework
		+ package - take the compiled code and package it in its distributable format, such as a JAR
		+ verify - run any checks on results of integration tests to ensure quality criteria are met
		+ install - install the package into the local repository, for use as a dependency in other projects locally
		+ deploy - done in the build environment, copies the final package to the remote repository for sharing with other developers and projects.
		
	What this means that when the default lifecycle is used, Maven will first validate the project, then will try to 
	compile the sources, run those against the tests, package the binaries (e.g. jar), run integration tests against 
	that package, verify the integration tests, install the verified package to the local repository, then deploy the 
	installed package to a remote repository.
 -->
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.revature</groupId>
	<artifactId>maven_junit_demo</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>maven_junit_demo</name>
	<description>Week 1 Day 5 Maven and JUnit demo</description>

	<!-- Use the properties tag to specify the properties of a project (version, encoding, etc.) -->
	<properties>
		<java.version>1.8</java.version>
	</properties>

	<!-- 
		Dependencies included here will be retrieved from the Maven Central Repository and 
		stored in our local .m2 repository 
	-->
	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
		</dependency>
	</dependencies>


</project>