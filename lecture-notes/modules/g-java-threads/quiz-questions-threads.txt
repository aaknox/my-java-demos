// Multiple choice: 6
// T/F: 4
// TOTAL: 10

// GUID: 89f4ff70-0acb-41e9-98c6-e2b8c1ceefd4
::Thread definition::
What is a thread? {
~A special method that executes only once
~A class which allows for more efficient and faster processing
=A representation of a path of execution, allowing for concurrent processing
~A separate program which can be run only after the end of the current program
}

// GUID: e50dace2-0085-485d-a703-45e52a03d08b
::Which of the following is NOT a virtual machine state of a thread?::
Which of the following is NOT a virtual machine state of a thread?{
~RUNNABLE
~BLOCKED
=START
~TERMINATED
~WAITING
}

// GUID: a377960c-24fa-410d-9604-7855dfdee3f0
::Synchronized keyword::
What is the synchronized keyword used for? {
=addressing the problem of deadlock by preventing access to the resource by more than one thread at a given time
~synchronizing the execution of many separate threads so they finish execution at the same time
~preventing access to the resource from outside the class
~enabling the class to be serialized
}

// GUID: 3496e866-8283-4b8b-83e0-1f5cb750105e
::Thread creation - 1::
Threads can be created by... {
~passing a Thread into the constructor of Runnable: new Runnable(Thread)
=passing a Runnable into the constructor of Thread: new Thread(Runnable)
~extending the Thread class and overriding the .start() method
~extending the Runnable class and overriding the .run() method
}

// GUID: 75677c2a-1003-4e83-82ac-b8a263f687dd
::Thread methods::
Which of the following Thread methods is used to wait for the thread to finish execution? {
=Thread.join()
~Thread.sleep()
~Thread.wait()
~Thread.interrupt()
~Thread.yield()
}

// GUID: 2805fc29-52f4-425e-9090-b7145e59252e
::Deadlock::
What is deadlock? {
=Deadlock occurs when one thread is waiting on a resource held by another thread, which is waiting on a resource the first has. In this scenario, execution of both threads is blocked and the program is stuck indefinitely.
~Deadlock occurs when a thread ends unexpectedly and disrupts execution of the program
~Deadlock occurs when two threads call each other and get stuck in an infinite loop
~Deadlock occurs when the program terminates before a thread can finish executing
}

// GUID: a20a9501-7ced-428e-8420-ea200b2c589e
::Thread creation - 2::
Threads can be created by extending the Runnable class.{FALSE#Runnable is an interface, not a class}

// GUID: e4e0864f-6f19-46e2-973b-436cc2a59041
::Threads - stack and heap::
Each thread gets its own stack and heap. {FALSE # Threads receive their own stack, not their own heap}

// GUID: ff06cde6-d3fd-42bb-9e08-e5e58d599c87
::The run() method comes from the Thread class.::
The run() method comes from the Thread class.{FALSE#It comes from the Runnable functional interface.}

// GUID: d4badbe0-8bbe-48a9-964f-db71b4b73d0c
::The synchronized keyword can be used for a class.::
The synchronized keyword can be used for a class.{FALSE#It is said that a class is synchronized or thread safe if all or some of its methods are synchronized.}
